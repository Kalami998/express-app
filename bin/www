#!/usr/bin/env node

/**
 * Module dependencies.
 */

const http = require("http");
const app = require("../app");
const debug = require("debug")("expressapp:server");
const process = require("process");
const consola = require("consola");
const { getIP } = require("../plugins/os");
const clc = require("cli-color");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "2008");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

const ipInfo = getIP();

// consola.info("ipInfo", ipInfo);

server.listen(port, () => {
	consola.success("进程的当前工作目录:", process.cwd());
	consola.start({
		message: clc.greenBright(`Server is runing, You can use the followings`),
	});
	consola.log("Local:   " + clc.blue.underline(`http://localhost:${port}`));
	consola.log(
		"Network: " +
			clc.blue.underline(
				`http://${ipInfo["lo0"]["IPv4"] || ipInfo["lo"]["IPv4"]}:${port}`
			)
	);
	consola.log({
		message:
			"Network: " +
			clc.blue.underline(
				`http://${ipInfo["en0"]["IPv4"] || ipInfo["eth0"]["IPv4"]}:${port}`
			),
	});
});
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== "listen") {
		throw error;
	}

	var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case "EACCES":
			console.error(bind + " requires elevated privileges");
			process.exit(1);
			break;
		case "EADDRINUSE":
			console.error(bind + " is already in use");
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
	debug("Listening on " + bind);
}
