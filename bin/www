#!/usr/bin/env node

/**
 * Module dependencies.
 */

const http = require("http");
const app = require("../app");
const debug = require("debug")("expressapp:server");
const process = require("process");
const consola = require("consola");
const clc = require("cli-color");
const { getIP } = require("../plugins/os");
const { createPort } = require("../plugins/net");
const { normalizePort } = require("../plugins/util");
const { start } = require("repl");

// 获取IP
const ipInfo = getIP();

// consola.log("ipInfo", ipInfo);

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || "7000");

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

function startListen() {
	consola.log("server start listening");
	server.listen(port, () => {
		consola.success("当前进程的文件目录:", process.cwd());
		consola.start({
			message: clc.greenBright(`Server is runing, You can use the followings`),
		});
		consola.log(
			"Local:   " + clc.greenBright.underline(`http://localhost:${port}`)
		);
		consola.log(
			"Network: " +
				clc.greenBright.underline(
					`http://${ipInfo["lo0"]["IPv4"] || ipInfo["lo"]["IPv4"]}:${port}`
				)
		);
		consola.log({
			message:
				"Network: " +
				clc.greenBright.underline(
					`http://${ipInfo["en0"]["IPv4"] || ipInfo["eth0"]["IPv4"]}:${port}`
				),
		});
	});

	server.on("error", onError);
	server.on("listening", onListening);
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== "listen") {
		throw error;
	}

	var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case "EACCES":
			console.error(bind + " requires elevated privileges");
			process.exit(1);
			break;
		case "EADDRINUSE":
			console.error(bind + " is already in use");
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
	debug("Listening on " + bind);
}

const Start = async () => {
	// 异步获取端口号
	port = await new Promise((resolve, reject) => {
		createPort({ port, host: "0.0.0.0" }, (data) => {
			resolve(data.port);
		});
	});
	app.set("port", port);
	startListen();
};

Start();
